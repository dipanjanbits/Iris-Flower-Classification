name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  # Stage 1: Build
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-output.outputs.image }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        # pytest  # Run tests if needed

    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      id: set-output
      run: |
        IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/iris-flower-classification-api:latest
        docker build -t $IMAGE_NAME .
        echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

  # Stage 2: Push
  push:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull & Push Docker image
      run: |
        docker pull ${{ needs.build.outputs.image }}
        docker push ${{ needs.build.outputs.image }}

  # Stage 3: Deploy
  deploy:
    needs: push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy on EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/iris-flower-classification-api:latest
          docker stop iris-flower-classification-api || true   # Stop existing container if any
          docker rm iris-flower-classification-api || true     # Remove it
          docker run -d --name iris-flower-classification-api -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/iris-flower-classification-api:latest
